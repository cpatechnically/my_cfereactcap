{"version":3,"sources":["App.js","logo.svg","utils/hooks.js","utils/cookies.js","reportWebVitals.js","index.js"],"names":["useEffect","React","useState","CaptureEmailUI","props","value","setValue","msg","setMsg","isError","setIsError","setDisplayMsg","error","String","timeout","setTimeout","clearTimeout","useDisplayMsg","url","xhr","XMLHttpRequest","open","setRequestHeader","onload","status","console","log","alert","send","config","className","formClass","onSubmit","event","preventDefault","csrftoken","name","cookies","document","cookie","split","forEach","c","m","trim","match","undefined","decodeURIComponent","getCookies","data","email","jsonData","JSON","stringify","onerror","successClass","inputClass","onChange","target","type","placeholder","required","errorClass","btnShow","btnClass","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","e","createElement","querySelectorAll","domContainer","ReactDOM","render","dataset"],"mappings":"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","file":"static/js/main.8bccef5a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { getCookies, useDisplayMsg } from './utils';\n\n\nconst useEffect = React.useEffect;\nconst useState = React.useState;\nconst baseURL = 'http://127.0.0.1:8000'\n\n\nconst CaptureEmailUI = (props) => {\n  const [value, setValue] = useState('')\n  const [msg, isError, setDisplayMsg] = useDisplayMsg()\n  const [token, setToken] = useState('')\n\n  useEffect(() => {\n    const url = `${baseURL}/api/capture/token/`\n    const xhr = new XMLHttpRequest()\n\n    xhr.open(\"GET\", url, true) // async\n    xhr.setRequestHeader('Content-Type', 'application/json')\n\n    xhr.onload = () => {\n      if (xhr.status === 200) {\n          console.log(xhr)\n      } else {\n          alert(\"Error\")\n      }\n    }\n    xhr.send()\n  })\n\n  const handleSubmit = (event) =>{\n    event.preventDefault()\n    const csrftoken = getCookies('csrftoken')\n    if (!csrftoken) {\n      setDisplayMsg(\"This is not a valid embed.\", true)\n    }\n\n    if (value === '' || value === undefined || value === null) {\n      setDisplayMsg(\"Value is required\", true)\n      return\n    }\n    // send to backend!\n    const baseURL = 'http://127.0.0.1:8000'\n    const url = `${baseURL}/api/capture/email/`\n    const data = {\n      email: value\n    }\n\n    const jsonData = JSON.stringify(data)\n\n    const xhr = new XMLHttpRequest()\n\n    xhr.open(\"POST\", url, true) // async\n    xhr.setRequestHeader('Content-Type', 'application/json')\n\n    xhr.setRequestHeader('X-CSRFTOKEN', csrftoken)\n    xhr.onerror = () => {\n      setDisplayMsg('Error! Please try again later.', true)\n    }\n    xhr.onload = () => {\n      if (xhr.status === 201) {\n          setValue('')\n          setDisplayMsg('Success! You email is saved.', false)\n      } else {\n          setDisplayMsg('Error! Please try again.', true)\n      }\n    }\n    xhr.send(jsonData)\n  }\n\n  const handleChange = (event) => {\n    setValue(event.target.value)\n    setDisplayMsg('', false)\n  }\n  const {config} = props\n\n  return <form className={config.formClass} onSubmit={handleSubmit}>\n    {(!isError && msg) && <div \n      className={config.successClass ? \n        config.successClass : 'alert alert-success'\n      }>{msg}</div>}\n      <input \n        className={config.inputClass} \n        value={value}\n        onChange={handleChange}\n        type='email' \n        placeholder='your email' \n        required\n        />\n      {(isError && msg) && <p className={config.errorClass}>{msg}</p>}\n      {config.btnShow === 'false' ? '' :\n        <p><button className={config.btnClass}  type='submit'>Save Email</button></p>\n      }\n    </form>\n}\n\nexport default CaptureEmailUI;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {useState, useEffect } from 'react'\r\n\r\nexport const useDisplayMsg = () => {\r\n    const [msg, setMsg] = useState('')\r\n    const [isError, setIsError] = useState(false)\r\n\r\n\r\n    const setDisplayMsg = (msg, isError) => {\r\n        setMsg(msg)\r\n        const error = String(isError) === 'true' ? true : false\r\n        setIsError(error)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        let timeout;\r\n        if (msg !== '') {\r\n            const duration = isError ? 20 * 1000 : 5 * 1000\r\n            timeout = setTimeout(()=>{\r\n                setDisplayMsg(\"\", false)\r\n            }, duration)\r\n        }\r\n\r\n        return () => {\r\n            clearTimeout(timeout)\r\n        }\r\n    })\r\n    return [msg, isError, setDisplayMsg]\r\n}","export const getCookies = (name) => {\r\n    // vanilla javascript\r\n    // docs have jquery\r\n    var cookies = {};\r\n    if (document.cookie && document.cookie !== '') {\r\n        document.cookie.split(';').forEach(function (c) {\r\n            var m = c.trim().match(/(\\w+)=(.*)/);\r\n            if(m !== undefined) {\r\n                cookies[m[1]] = decodeURIComponent(m[2]);\r\n            }\r\n        });\r\n    }\r\n    if (name) {\r\n        return cookies[name]\r\n    }\r\n    return cookies;\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CaptureEmailUI from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst e = React.createElement;\n\n// Find all DOM containers, and render our component into them.\nconst containers = document.querySelectorAll('.cap-ui')\ncontainers.forEach(domContainer => {\n  // render the component into the DOM\n  ReactDOM.render(\n    e(CaptureEmailUI, { config: domContainer.dataset}),\n    domContainer\n  )\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}